(()=>{"use strict";const e=function(){const e=[];return{addToList:t=>{e.push(t)},getList:()=>e,delProj:t=>{e.splice(t,1)}}}(),t=e=>{const n=e.getTasks(),d=document.querySelector(".main");d.textContent="";const i=document.querySelector(".taskViewModal"),l=document.getElementById("viewTitle"),o=document.getElementById("viewDesc"),a=document.getElementById("viewDueDate"),s=document.getElementById("viewPriority"),c=document.querySelector(".editTaskModal"),r=document.getElementById("edit-title"),u=document.getElementById("edit-desc"),m=document.getElementById("edit-taskDate"),p=document.getElementById("edit-priority"),v=document.querySelector(".edit-task-form");for(let y=0;y<n.length;y++){const b=document.createElement("div");b.classList.add("task");const k=document.createElement("div");k.classList.add("taskTitle"),k.textContent=n[y].title;const E=document.createElement("button");E.textContent="Open",E.classList.add("openBtn"),E.addEventListener("click",(()=>{l.textContent=n[y].title,o.textContent=n[y].desc,a.textContent=n[y].dueDate,s.textContent=n[y].priority,i.style.display="block"}));const C=document.createElement("button");C.textContent="Edit",C.classList.add("editBtn"),C.addEventListener("click",(()=>{r.value=n[y].title,u.value=n[y].desc,m.value=n[y].dueDate,p.value=n[y].priority,v.addEventListener("submit",(function d(i){i.preventDefault();const l=new FormData(i.target);n[y].title=l.get("edit-title"),n[y].desc=l.get("edit-desc"),n[y].dueDate=l.get("edit-taskDate"),n[y].priority=l.get("edit-priority"),c.style.display="none",v.removeEventListener("submit",d),t(e)})),c.style.display="block"}));const h=document.createElement("button");h.textContent="Delete",h.classList.add("delBtn"),h.addEventListener("click",(()=>{e.delTask(y),t(e)}));const g=document.createElement("div");g.appendChild(E),g.appendChild(C),g.appendChild(h),b.appendChild(k),b.appendChild(g),d.appendChild(b)}},n=e=>{const n=document.querySelector(".content");n.textContent="",n.innerHTML+='<div class="taskModal">\n<button id="close-modal">X</button>\n<div>\n<form action="" class="task-form">\n<div>\n<label for="title">Title: </label>\n<input type="text" id="title" name="title" required placeholder=" ">\n</div>\n<div>\n<label for="desc">Description:</label>\n<textarea id="desc" name="desc" maxlength="85"></textarea>\n</div>\n<div>\n<label for="taskDate">Due Date:</label>\n<input type="date" id="taskDate" name="taskDate">\n</div>\n<div>\n<label for="priority">Priority: </label>\n<select id="priority" name="priority">\n<option value="high">High</option>\n<option value="medium">Medium</option>\n<option value="low">Low</option>\n</select>\n</div>\n<button type="submit" id="submit-btn">Submit</button>\n</form>\n</div>\n</div>\n<div class="editTaskModal">\n<button id="close-edit-modal">X</button>\n<div>\n<form action="" class="edit-task-form">\n<div>\n<label for="edit-title">Title: </label>\n<input type="text" id="edit-title" name="edit-title" required placeholder=" ">\n</div>\n<div>\n<label for="edit-desc">Description:</label>\n<textarea id="edit-desc" name="edit-desc" maxlength="85"></textarea>\n</div>\n<div>\n<label for="edit-taskDate">Due Date:</label>\n<input type="date" id="edit-taskDate" name="edit-taskDate">\n</div>\n<div>\n<label for="priority">Priority: </label>\n<select id="edit-priority" name="edit-priority">\n<option value="high">High</option>\n<option value="medium">Medium</option>\n<option value="low">Low</option>\n</select>\n</div>\n<button type="submit" id="edit-submit-btn">Submit</button>\n</form>\n</div>\n</div>\n<div class="taskViewModal">\n<button id="close-view-modal">X</button>\n<div>\n<div class="taskViewHolder">\n<div class="taskViewLabel">Title: </div>\n<div id="viewTitle"></div>\n</div>\n<div class="taskViewHolder">\n<div class="taskViewLabel">Description: </div>\n<p id="viewDesc"></p>\n</div>\n<div class="taskViewHolder">\n<div class="taskViewLabel">Due Date: </div>\n<div id="viewDueDate"></div>\n</div>\n<div class="taskViewHolder">\n<div class="taskViewLabel">Priority: </div>\n<div id="viewPriority"></div>\n</div>\n</div>\n</div>\n<div class="header">\n<div class="headerTitle">\n'+e.getTitle()+' tasks</div>\n<div>\n<button id="add-task">Add Task</button>\n<button id="return">Return to Projects</button>\n</div>\n</div>\n<div class="main">\n</div>\n';const d=document.querySelector(".taskModal"),l=document.querySelector(".task-form"),o=document.querySelector(".editTaskModal");document.getElementById("close-edit-modal").addEventListener("click",(()=>{o.style.display="none"})),document.getElementById("add-task").addEventListener("click",(()=>{d.style.display="block"})),document.getElementById("return").addEventListener("click",(()=>{i()})),document.getElementById("close-modal").addEventListener("click",(()=>{d.style.display="none"}));const a=document.querySelector(".taskViewModal");document.getElementById("close-view-modal").addEventListener("click",(()=>{a.style.display="none"})),l.addEventListener("submit",(n=>{n.preventDefault(),d.style.display="none";const i=new FormData(n.target),o={title:i.get("title"),desc:i.get("desc"),dueDate:i.get("taskDate"),priority:i.get("priority")};e.addTask(o),t(e),l.reset()})),t(e)},d=()=>{const t=e.getList(),i=document.querySelector(".main");i.textContent="";for(let l=0;l<t.length;l++){const o=document.createElement("div");o.classList.add("project"),o.setAttribute("id",l);const a=document.createElement("div");a.classList.add("projectTitle"),a.textContent=t[l].getTitle();const s=document.createElement("button");s.textContent="Open",s.setAttribute("id","projOpenBtn"),s.addEventListener("click",(()=>{n(t[l])}));const c=document.createElement("button");c.textContent="Delete",c.setAttribute("id","projDelBtn"),c.addEventListener("click",(()=>{e.delProj(l),d()}));const r=document.createElement("div");o.appendChild(a),r.appendChild(s),r.appendChild(c),o.appendChild(r),i.appendChild(o)}},i=()=>{const t=document.querySelector(".content");t.textContent="";const n=document.createElement("div");n.classList.add("projModal");const i=document.createElement("div"),l=document.createElement("button");l.setAttribute("id","close-modal"),l.textContent="X";const o=document.createElement("div"),a=document.createElement("label");a.setAttribute("for","projTitle"),a.textContent="Project Title:";const s=document.createElement("input");s.setAttribute("type","text"),s.setAttribute("id","projTitle"),o.appendChild(a),o.appendChild(s);const c=document.createElement("button");c.setAttribute("id","projSubmit"),c.textContent="Submit",i.appendChild(l),i.appendChild(o),i.appendChild(c),n.appendChild(i);const r=document.createElement("div");r.classList.add("header");const u=document.createElement("div");u.classList.add("headerTitle"),u.textContent="Projects";const m=document.createElement("button");m.setAttribute("id","addBtn"),m.textContent="Add Project",r.appendChild(u),r.appendChild(m);const p=document.createElement("div");p.classList.add("main"),t.appendChild(n),t.appendChild(r),t.appendChild(p),d(),m.addEventListener("click",(()=>{n.style.display="block"})),l.addEventListener("click",(()=>{n.style.display="none"})),c.addEventListener("click",(()=>{s.value&&(e.addToList((e=>{const t=[];return{addTask:e=>{t.push(e)},getTasks:()=>t,getTitle:()=>e,delTask:e=>{t.splice(e,1)}}})(s.value)),s.value="",n.style.display="none",d())}))};i()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,