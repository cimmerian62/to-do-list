(()=>{"use strict";const t=function(){const t=[];return{addToList:e=>{t.push(e)},getList:()=>t,delProj:e=>{t.splice(e,1)}}}();function e(t,e){this.title=t,this.arr=e}e.prototype.delTask=function(t){this.arr.splice(t,1)},e.prototype.addTask=function(t){this.arr.push(t)};const n=()=>{const e=JSON.stringify(t.getList());localStorage.setItem("list",e)},i=t=>{const e=t.arr,d=document.querySelector(".main");d.textContent="";const o=document.querySelector(".taskViewModal"),l=document.getElementById("viewTitle"),a=document.getElementById("viewDesc"),s=document.getElementById("viewDueDate"),c=document.getElementById("viewPriority"),r=document.querySelector(".editTaskModal"),u=document.getElementById("edit-title"),m=document.getElementById("edit-desc"),p=document.getElementById("edit-taskDate"),v=document.getElementById("edit-priority"),y=document.querySelector(".edit-task-form");for(let b=0;b<e.length;b++){const k=document.createElement("div");k.classList.add("task");const E=document.createElement("div");E.classList.add("taskTitle"),E.textContent=e[b].title;const h=document.createElement("button");h.textContent="Open",h.classList.add("openBtn"),h.addEventListener("click",(()=>{l.textContent=e[b].title,a.textContent=e[b].desc,s.textContent=e[b].dueDate,c.textContent=e[b].priority,o.style.display="block"}));const C=document.createElement("button");C.textContent="Edit",C.classList.add("editBtn"),C.addEventListener("click",(()=>{u.value=e[b].title,m.value=e[b].desc,p.value=e[b].dueDate,v.value=e[b].priority,y.addEventListener("submit",(function d(o){o.preventDefault();const l=new FormData(o.target);e[b].title=l.get("edit-title"),e[b].desc=l.get("edit-desc"),e[b].dueDate=l.get("edit-taskDate"),e[b].priority=l.get("edit-priority"),r.style.display="none",y.removeEventListener("submit",d),i(t),n()})),r.style.display="block"}));const L=document.createElement("button");L.textContent="Delete",L.classList.add("delBtn"),L.addEventListener("click",(()=>{t.delTask(b),i(t),n()}));const g=document.createElement("div");g.appendChild(h),g.appendChild(C),g.appendChild(L),k.appendChild(E),k.appendChild(g),d.appendChild(k)}},d=t=>{const e=document.querySelector(".content");e.textContent="",e.innerHTML+='<div class="taskModal">\n<button id="close-modal">X</button>\n<div>\n<form action="" class="task-form">\n<div>\n<label for="title">Title: </label>\n<input type="text" id="title" name="title" required placeholder=" ">\n</div>\n<div>\n<label for="desc">Description:</label>\n<textarea id="desc" name="desc" maxlength="85"></textarea>\n</div>\n<div>\n<label for="taskDate">Due Date:</label>\n<input type="date" id="taskDate" name="taskDate">\n</div>\n<div>\n<label for="priority">Priority: </label>\n<select id="priority" name="priority">\n<option value="high">High</option>\n<option value="medium">Medium</option>\n<option value="low">Low</option>\n</select>\n</div>\n<button type="submit" id="submit-btn">Submit</button>\n</form>\n</div>\n</div>\n<div class="editTaskModal">\n<button id="close-edit-modal">X</button>\n<div>\n<form action="" class="edit-task-form">\n<div>\n<label for="edit-title">Title: </label>\n<input type="text" id="edit-title" name="edit-title" required placeholder=" ">\n</div>\n<div>\n<label for="edit-desc">Description:</label>\n<textarea id="edit-desc" name="edit-desc" maxlength="85"></textarea>\n</div>\n<div>\n<label for="edit-taskDate">Due Date:</label>\n<input type="date" id="edit-taskDate" name="edit-taskDate">\n</div>\n<div>\n<label for="priority">Priority: </label>\n<select id="edit-priority" name="edit-priority">\n<option value="high">High</option>\n<option value="medium">Medium</option>\n<option value="low">Low</option>\n</select>\n</div>\n<button type="submit" id="edit-submit-btn">Submit</button>\n</form>\n</div>\n</div>\n<div class="taskViewModal">\n<button id="close-view-modal">X</button>\n<div>\n<div class="taskViewHolder">\n<div class="taskViewLabel">Title: </div>\n<div id="viewTitle"></div>\n</div>\n<div class="taskViewHolder">\n<div class="taskViewLabel">Description: </div>\n<p id="viewDesc"></p>\n</div>\n<div class="taskViewHolder">\n<div class="taskViewLabel">Due Date: </div>\n<div id="viewDueDate"></div>\n</div>\n<div class="taskViewHolder">\n<div class="taskViewLabel">Priority: </div>\n<div id="viewPriority"></div>\n</div>\n</div>\n</div>\n<div class="header">\n<div class="headerTitle">\n'+t.title+' tasks</div>\n<div>\n<button id="add-task">Add Task</button>\n<button id="return">Return to Projects</button>\n</div>\n</div>\n<div class="main">\n</div>\n';const d=document.querySelector(".taskModal"),o=document.querySelector(".task-form"),a=document.querySelector(".editTaskModal");document.getElementById("close-edit-modal").addEventListener("click",(()=>{a.style.display="none"})),document.getElementById("add-task").addEventListener("click",(()=>{d.style.display="block"})),document.getElementById("return").addEventListener("click",(()=>{l()})),document.getElementById("close-modal").addEventListener("click",(()=>{d.style.display="none"}));const s=document.querySelector(".taskViewModal");document.getElementById("close-view-modal").addEventListener("click",(()=>{s.style.display="none"})),o.addEventListener("submit",(e=>{e.preventDefault(),d.style.display="none";const l=new FormData(e.target),a={title:l.get("title"),desc:l.get("desc"),dueDate:l.get("taskDate"),priority:l.get("priority")};t.addTask(a),i(t),o.reset(),n()})),i(t)},o=()=>{const e=t.getList(),i=document.querySelector(".main");i.textContent="";for(let l=0;l<e.length;l++){const a=document.createElement("div");a.classList.add("project"),a.setAttribute("id",l);const s=document.createElement("div");s.classList.add("projectTitle"),s.textContent=e[l].title;const c=document.createElement("button");c.textContent="Open",c.setAttribute("id","projOpenBtn"),c.addEventListener("click",(()=>{d(e[l])}));const r=document.createElement("button");r.textContent="Delete",r.setAttribute("id","projDelBtn"),r.addEventListener("click",(()=>{t.delProj(l),o(),n()}));const u=document.createElement("div");a.appendChild(s),u.appendChild(c),u.appendChild(r),a.appendChild(u),i.appendChild(a)}},l=()=>{const i=document.querySelector(".content");i.textContent="";const d=document.createElement("div");d.classList.add("projModal");const l=document.createElement("div"),a=document.createElement("button");a.setAttribute("id","close-modal"),a.textContent="X";const s=document.createElement("div"),c=document.createElement("label");c.setAttribute("for","projTitle"),c.textContent="Project Title:";const r=document.createElement("input");r.setAttribute("type","text"),r.setAttribute("id","projTitle"),s.appendChild(c),s.appendChild(r);const u=document.createElement("button");u.setAttribute("id","projSubmit"),u.textContent="Submit",l.appendChild(a),l.appendChild(s),l.appendChild(u),d.appendChild(l);const m=document.createElement("div");m.classList.add("header");const p=document.createElement("div");p.classList.add("headerTitle"),p.textContent="Projects";const v=document.createElement("button");v.setAttribute("id","addBtn"),v.textContent="Add Project",m.appendChild(p),m.appendChild(v);const y=document.createElement("div");y.classList.add("main"),i.appendChild(d),i.appendChild(m),i.appendChild(y),o(),v.addEventListener("click",(()=>{d.style.display="block"})),a.addEventListener("click",(()=>{d.style.display="none"})),u.addEventListener("click",(()=>{r.value&&(t.addToList(new e(r.value,[])),r.value="",d.style.display="none",o(),n())}))};localStorage.getItem("list")&&JSON.parse(localStorage.list).forEach((n=>{t.addToList(new e(n.title,n.arr))})),l()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,